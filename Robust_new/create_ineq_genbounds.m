function [gen_bounds] = create_ineq_genbounds(Psi_u_vvcos,Psi_l_vvcos,Psi_u_vvsin,Psi_l_vvsin,Psi_u_vv,Psi_l_vv,pl_opt,ql_opt,slack_pg,slack_qg,gamma_opt,M_ineq_p,M_ineq_m,Cg,Cl,pg_max,qg_max,pg_min,qg_min,pl0,ql0,zeta)
    Ngen = numel(pg_max);
    bounds1 = -M_ineq_m*[Cg*pg_max-Cl*pl_opt;Cg*qg_max-Cl*ql_opt;Psi_u_vvcos;Psi_u_vvsin;Psi_u_vv]-...
        M_ineq_p*[Cg*pg_max-Cl*pl0;Cg*qg_max-Cl*ql0;Psi_l_vvcos;Psi_l_vvsin;Psi_l_vv]+...
        [slack_pg*ones(Ngen,1);slack_qg*ones(Ngen,1)]+gamma_opt*zeta;
    bounds2 = M_ineq_p*[Cg*pg_min-Cl*pl_opt;Cg*qg_min-Cl*ql_opt;Psi_u_vvcos;Psi_u_vvsin;Psi_u_vv]+...
        M_ineq_m*[Cg*pg_min-Cl*ql0;Cg*qg_min-Cl*ql0;Psi_l_vvcos;Psi_l_vvsin;Psi_l_vv]+...
        [slack_pg*ones(Ngen,1);slack_qg*ones(Ngen,1)]+gamma_opt*zeta;
    gen_bounds=vertcat(bounds1,bounds2);
    %4Ngen
end

